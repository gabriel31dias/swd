// Generated by dts-bundle-generator v8.0.1

import { Component, ErrorInfo, ReactNode } from 'react';

export type Dispatch = <T = unknown>(message: Message<T>) => void;
export type Unsuscribe = () => void;
export type Suscribe = (type: string, callback: any) => Unsuscribe;
export interface Message<T = unknown> {
	type: string;
	payload?: T;
}
export type OnReady = (callback: () => void) => void;
export interface NexoClient {
	clientId: string;
	dispatch: Dispatch;
	suscribe: Suscribe;
	onReady: OnReady;
}
export declare const create: ({ clientId, log, }: {
	clientId: string;
	log?: boolean | undefined;
}) => NexoClient;
export interface ErrorBoundaryProps {
	children?: ReactNode;
	nexo: NexoClient;
}
export interface ErrorBoundaryState {
	hasError: boolean;
}
export declare class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
	state: ErrorBoundaryState;
	static getDerivedStateFromError(_: Error): ErrorBoundaryState;
	componentDidCatch(error: Error, errorInfo: ErrorInfo): void;
	render(): import("react").ReactNode;
}
export type NavigateGoToRequest = {
	pathname: string;
};
export type NavigatePathnameResponse = {
	pathname: string | null;
};
export type NavigateSyncResponse = {
	path: string;
	replace?: boolean;
};
export type NavigateSyncRequest = {
	pathname: string;
};
export type AuthSessionTokenResponse = {
	token: string;
};
export type DeviceResponse = {
	isMobile: boolean;
};
export type UserAdminInfoResponse = {
	id: string;
	name: string;
	roles: string[];
};
export type StoreInfoResponse = {
	id: string;
	name: string;
	url: string;
	country: string;
	language: string;
	currency: string;
	languages: string[];
};
export type CopyToClipboardRequest = {
	text: string;
};
export type CopyToClipboardResponse = {
	success: boolean;
};
export type NavigateGoToOldAdminRequest = {
	pathToOldAdmin: string;
};
export type NavigateHeaderRequest = {
	goTo?: "back" | string;
	goToAdmin?: string;
	text?: string;
	remove?: boolean;
};
export type LogErrorRequest = {
	url: string;
	message: string;
	stack: string;
};
export type StoreFeatureRequest = {
	featureKey: string;
};
export type StoreFeatureResponse = {
	isFeatureEnabled: boolean;
	unlimited: boolean;
	maxUse: number;
};
export type RunWithUpsellHelperParams = {
	nexo: NexoClient;
	featureKey: string;
	modalTitle: string;
	trackingSource: string;
	callback: () => void;
	onDeclined?: () => void;
	onPlansRedirect?: () => void;
	onUnavailable?: () => void;
	onError?: () => void;
};
export type StoreUpsellRequest = {
	featureKey: string;
	modalTitle: string;
	trackingSource: string;
};
export type StoreUpsellResponse = {
	result: UpsellResultEnum;
};
export declare enum UpsellResultEnum {
	ACCEPTED = "accepted",
	DECLINED = "declined",
	PLANS_REDIRECT = "plans_redirect",
	SKIPPED = "skipped",
	UNAVAILABLE = "unavailable",
	ERROR = "error"
}
export declare const ACTION_READY = "app/ready";
export declare const ACTION_CONNECTED = "app/connected";
export declare const ACTION_NAVIGATE_EXIT = "app/navigate/exit";
export declare const ACTION_NAVIGATE_BACK = "app/navigate/back";
export declare const ACTION_NAVIGATE_GOTO = "app/navigate/goTo";
export declare const ACTION_NAVIGATE_PATHNAME = "app/navigate/pathname";
export declare const ACTION_NAVIGATE_SYNC = "app/navigate/sync";
export declare const ACTION_NAVIGATE_FULLSCREEN = "app/navigate/fullscreen";
export declare const ACTION_AUTH_SESSION_TOKEN = "app/auth/sessionToken";
export declare const ACTION_DEVICE = "app/device";
export declare const ACTION_STORE_INFO = "app/store/info";
export declare const ACTION_USER_ADMIN_INFO = "app/user/info";
export declare const ACTION_UTILS_COPY_TO_CLIPBOARD = "app/utils/copyToClipboard";
export declare const ACTION_UTILS_OPEN_IN_DEFAULT_BROWSER = "app/utils/openInDefaultBrowser";
export declare const ACTION_NAVIGATE_GOTO_OLD_ADMIN = "app/navigate/goToOldAdmin";
export declare const ACTION_NAVIGATE_HEADER = "app/navigate/header";
export declare const ACTION_LOG_ERROR = "app/log/error";
export declare const ACTION_STORE_FEATURE = "app/store/feature";
export declare const ACTION_STORE_UPSELL = "app/store/upsell";
export declare const connect: (nexo: NexoClient, ttl?: number) => Promise<void>;
export declare const iAmReady: (nexo: NexoClient) => void;
export declare const navigateExit: (nexo: NexoClient) => void;
export declare const navigateBack: (nexo: NexoClient) => void;
export declare const navigateFullscren: (nexo: NexoClient, mode: "normal" | "fullscreen") => void;
export declare const getSessionToken: (nexo: NexoClient) => Promise<string>;
export declare const getCurrentPathname: (nexo: NexoClient) => Promise<string | null>;
export declare const syncPathname: (nexo: NexoClient, pathname: string) => void;
export declare const getStoreInfo: (nexo: NexoClient) => Promise<StoreInfoResponse>;
export declare const getUserAdminInfo: (nexo: NexoClient) => Promise<UserAdminInfoResponse>;
export declare const getIsMobileDevice: (nexo: NexoClient) => Promise<boolean>;
export declare const goTo: (nexo: NexoClient, pathname: string) => void;
export declare const openInDefaultBrowser: (nexo: NexoClient, pathname: string) => void;
export declare const goToOldAdmin: (nexo: NexoClient, pathToOldAdmin: string) => void;
export declare const copyToClipboard: (nexo: NexoClient, text: string) => Promise<boolean>;
export declare const navigateHeader: (nexo: NexoClient, config: NavigateHeaderRequest) => void;
export declare const navigateHeaderRemove: (nexo: NexoClient) => void;
export declare const getFeatureStatus: (nexo: NexoClient, featureKey: string) => Promise<StoreFeatureResponse>;
export declare const runWithUpsell: (params: RunWithUpsellHelperParams) => Promise<void>;
declare const _default: {
	connect: (nexo: NexoClient, ttl?: number) => Promise<void>;
	iAmReady: (nexo: NexoClient) => void;
	navigateExit: (nexo: NexoClient) => void;
	navigateBack: (nexo: NexoClient) => void;
	navigateFullscren: (nexo: NexoClient, mode: "normal" | "fullscreen") => void;
	getSessionToken: (nexo: NexoClient) => Promise<string>;
	getCurrentPathname: (nexo: NexoClient) => Promise<string | null>;
	syncPathname: (nexo: NexoClient, pathname: string) => void;
	getStoreInfo: (nexo: NexoClient) => Promise<StoreInfoResponse>;
	getUserAdminInfo: (nexo: NexoClient) => Promise<UserAdminInfoResponse>;
	getIsMobileDevice: (nexo: NexoClient) => Promise<boolean>;
	goTo: (nexo: NexoClient, pathname: string) => void;
	openInDefaultBrowser: (nexo: NexoClient, pathname: string) => void;
	goToOldAdmin: (nexo: NexoClient, pathToOldAdmin: string) => void;
	copyToClipboard: (nexo: NexoClient, text: string) => Promise<boolean>;
	navigateHeader: (nexo: NexoClient, config: NavigateHeaderRequest) => void;
	navigateHeaderRemove: (nexo: NexoClient) => void;
	getFeatureStatus: (nexo: NexoClient, featureKey: string) => Promise<StoreFeatureResponse>;
	runWithUpsell: (params: RunWithUpsellHelperParams) => Promise<void>;
	ACTION_READY: string;
	ACTION_CONNECTED: string;
	ACTION_NAVIGATE_EXIT: string;
	ACTION_NAVIGATE_BACK: string;
	ACTION_NAVIGATE_GOTO: string;
	ACTION_NAVIGATE_PATHNAME: string;
	ACTION_NAVIGATE_SYNC: string;
	ACTION_NAVIGATE_FULLSCREEN: string;
	ACTION_AUTH_SESSION_TOKEN: string;
	ACTION_DEVICE: string;
	ACTION_STORE_INFO: string;
	ACTION_USER_ADMIN_INFO: string;
	ACTION_UTILS_COPY_TO_CLIPBOARD: string;
	ACTION_UTILS_OPEN_IN_DEFAULT_BROWSER: string;
	ACTION_NAVIGATE_GOTO_OLD_ADMIN: string;
	ACTION_NAVIGATE_HEADER: string;
	ACTION_LOG_ERROR: string;
	ACTION_STORE_FEATURE: string;
	ACTION_STORE_UPSELL: string;
	ErrorBoundary: typeof ErrorBoundary;
	create: ({ clientId, log, }: {
		clientId: string;
		log?: boolean | undefined;
	}) => NexoClient;
};

export {
	_default as default,
};

export {};
