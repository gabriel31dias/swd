// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { ButtonHTMLAttributes, ComponentPropsWithRef, HTMLAttributes, InputHTMLAttributes, ReactNode } from 'react';

export type InputIconProperties = Required<Pick<InputBaseProps, "appendPosition">>;
export type InputIconProps = InputIconProperties & ButtonHTMLAttributes<HTMLButtonElement>;
export declare const InputIcon: React.FC<InputIconProps>;
export type InputPasswordProperties = Pick<InputBaseProps, "appearance" | "disabled" | "aiGenerated">;
export declare const InputPassword: React.ForwardRefExoticComponent<InputPasswordProperties & React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>>;
export type InputPasswordProps = ComponentPropsWithRef<typeof InputPassword>;
export type InputSearchProperties = Pick<InputBaseProps, "appearance" | "disabled" | "aiGenerated">;
export declare const InputSearch: React.ForwardRefExoticComponent<InputSearchProperties & React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>>;
export type InputSearchProps = ComponentPropsWithRef<typeof InputSearch>;
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type InputSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "data-testid">>;
export type InputSkeletonProps = InputSkeletonProperties;
export declare const InputSkeleton: React.FC<InputSkeletonProps>;
export interface InputComponents {
	Password: typeof InputPassword;
	Search: typeof InputSearch;
	Skeleton: typeof InputSkeleton;
}
export interface InputProperties {
	/**
	 * Change the visual style of the input.
	 * @default neutral
	 */
	appearance?: "neutral" | "success" | "warning" | "danger" | "ai-generative";
	/**
	 * Highlights the field to indicate its value was generated by AI.
	 * Applies AI gradient border, white background and an AI focus ring.
	 */
	aiGenerated?: boolean;
	/**
	 * Disables the input, disallowing user interaction.
	 */
	disabled?: boolean;
	/**
	 * Sent icon display position
	 * @default start
	 */
	appendPosition?: "end" | "start";
	/**
	 * SVG icon to be displayed on input.
	 * @TJS-type React.ReactNode
	 */
	append?: ReactNode;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type InputBaseProps = InputProperties & InputHTMLAttributes<HTMLInputElement>;
export declare const Input: React.ForwardRefExoticComponent<InputProperties & React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement>> & InputComponents;
export type InputProps = ComponentPropsWithRef<typeof Input>;

export {};
