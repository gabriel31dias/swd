// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, InputHTMLAttributes } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type CheckboxSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "data-testid">>;
export type CheckboxSkeletonProps = CheckboxSkeletonProperties;
export declare const CheckboxSkeleton: React.FC<CheckboxSkeletonProps>;
export interface CheckboxComponents {
	Skeleton: typeof CheckboxSkeleton;
}
export interface CheckboxProperties {
	/**
	 * 	The name of the input element.
	 */
	name: string;
	/**
	 * Change the visual style of the checkbox.
	 * @default neutral
	 */
	appearance?: "primary" | "danger";
	/**
	 * Modifies true/false value of the native checkbox.
	 */
	checked?: boolean;
	/**
	 * Modifies the native disabled state of the native checkbox.
	 */
	disabled?: boolean;
	/**
	 * If true, the component appears indeterminate. This does not set the native input element to indeterminate due to inconsistent behavior across browsers. However, we set a data-indeterminate attribute on the input.
	 * @default false
	 */
	indeterminate?: boolean;
	/**
	 * Text to be rendered inside the component.
	 */
	label?: string;
}
export type CheckboxProps = CheckboxProperties & InputHTMLAttributes<HTMLInputElement>;
export declare const Checkbox: React.FC<CheckboxProps> & CheckboxComponents;

export {};
