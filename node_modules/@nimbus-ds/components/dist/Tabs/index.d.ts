// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactElement, ReactNode } from 'react';

export interface TabsButtonProperties {
	/**
	 * Label of the tab button.
	 */
	label: string;
	/**
	 * Content of the tab button.
	 */
	labelContent?: ReactNode;
	/**
	 * Determines if tab is active.
	 * @default false
	 */
	active?: boolean;
	/**
	 * Position of the tab inside the tab list.
	 */
	index: number;
	/**
	 * Function executed when clicking the tab.
	 * @TJS-type (index: number) => void;
	 */
	setActiveTab: (index: number) => void;
	/**
	 * Determines if tab spans all available width.
	 * @default false
	 */
	fullWidth?: boolean;
}
export type TabsButtonProps = TabsButtonProperties & HTMLAttributes<HTMLLIElement>;
export declare const TabsButton: React.FC<TabsButtonProps>;
export interface TabsItemProperties {
	/**
	 * Label of the tabpanel. Used to pair with it's corresponding tab control.
	 */
	label: string;
	/**
	 * Optional content of the tabpanel.
	 * @TJS-type ReactNode;
	 */
	labelContent?: ReactNode;
	/**
	 * The content of the tabs item.
	 * @TJS-type ReactNode | ReactNode[];
	 */
	children: ReactNode | ReactNode[];
}
export type TabsItemProps = TabsItemProperties & HTMLAttributes<HTMLElement>;
export declare const TabsItem: React.FC<TabsItemProps>;
export interface TabsComponents {
	Button: typeof TabsButton;
	Item: typeof TabsItem;
}
export interface BaseTabsProperties {
	/**
	 * The content of the tabs.
	 * @TJS-type ReactElement<TabsButtonProps>[];
	 */
	children: ReactElement<TabsButtonProps>[];
	/**
	 * Sets the indicated tab as active by default. If unset, defaults to first tab.
	 */
	preSelectedTab?: number;
	/**
	 * Determines if tabs should span available width.
	 * @default false
	 */
	fullWidth?: boolean;
}
export interface ControlledTabsProperties extends BaseTabsProperties {
	/**
	 * The currently selected tab index.
	 */
	selected: number;
	/**
	 * Callback fired when the selected tab changes.
	 */
	onTabSelect: (index: number) => void;
	/**
	 * preSelectedTab is not used in controlled mode
	 */
	preSelectedTab?: never;
}
export type TabsProps = (BaseTabsProperties | ControlledTabsProperties) & Omit<HTMLAttributes<HTMLDivElement>, "children" | "onSelect">;
export declare const Tabs: React.FC<TabsProps> & TabsComponents;

export {};
