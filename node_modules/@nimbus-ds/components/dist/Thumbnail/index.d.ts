// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ImgHTMLAttributes, ReactNode } from 'react';

export type AspectRatio = "1/1" | "16/9" | "9/16" | "4/3" | "3/4" | "2/1" | "1/2";
declare const thumbnail: {
	sprinkle: ((props: {
		aspectRatio?: AspectRatio | undefined;
	}) => string) & {
		properties: Set<"aspectRatio">;
	};
	properties: {
		aspectRatio: AspectRatio[];
	};
	classnames: {
		container: string;
		container__image: string;
		container__placeholder: string;
		skeleton: string;
		width: string;
	};
};
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type ThumbnailSkeletonProperties = Partial<Pick<ThumbnailProps, "aspectRatio">> & Partial<Pick<SkeletonProps, "width" | "data-testid">>;
export type ThumbnailSkeletonProps = ThumbnailSkeletonProperties;
export declare const ThumbnailSkeleton: React.FC<ThumbnailSkeletonProps>;
export interface ThumbnailComponents {
	Skeleton: typeof ThumbnailSkeleton;
}
export interface ThumbnailProperties {
	/**
	 * The required alt attribute specifies an alternate text for an image, if the image cannot be displayed.
	 */
	alt: string;
	/**
	 * The content of the thumbnail.
	 * @TJS-type React.ReactNode
	 */
	children?: ReactNode;
	/**
	 * Permitted aspect ratios for the size of the thumbnail image.
	 * @default 1/1
	 */
	aspectRatio?: typeof thumbnail.properties.aspectRatio[number];
	/**
	 * Width value of the thumbnail image. Defaults to 100%.
	 * @default 100%
	 */
	width?: string;
}
export type ThumbnailProps = ThumbnailProperties & ImgHTMLAttributes<HTMLImageElement>;
export declare const Thumbnail: React.FC<ThumbnailProps> & ThumbnailComponents;

export {};
