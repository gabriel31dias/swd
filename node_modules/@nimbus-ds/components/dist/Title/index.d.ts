// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface Conditions<T> {
	xs?: T;
	md?: T;
	lg?: T;
	xl?: T;
}
export type TextAlign = "left" | "right" | "center" | "justify";
declare const propertiesTitle: {
	color: {
		"primary-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"primary-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"success-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"success-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"warning-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"warning-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"danger-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"danger-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-background": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	textAlign: TextAlign[];
	fontSize: {
		"0-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"1": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"1-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"2": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"2-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"3": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"3-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"4": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"4-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"6": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"7": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"8": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"9": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"10": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"11": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"12": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"14": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"16": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"18": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"20": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h1: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h2: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h3: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h4: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h5: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h6: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	fontWeight: {
		regular: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		medium: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		bold: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	lineHeight: {
		"0-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"1": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"1-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"2": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"2-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"3": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"3-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"4": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"4-5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"5": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"6": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"7": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"8": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"9": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"10": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"11": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"12": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"14": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"16": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"18": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"20": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h1: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h2: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h3: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h4: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h5: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		h6: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
};
export type TitleColorProperties = keyof typeof propertiesTitle.color;
export type TitleFontSizeProperties = keyof typeof propertiesTitle.fontSize;
export type TitleFontWeightProperties = keyof typeof propertiesTitle.fontWeight;
export type TitleLineHeightProperties = keyof typeof propertiesTitle.lineHeight;
export type TitleConditions<T> = Conditions<T>;
export interface TitleSprinkle {
	/**
	 * The fontSize property sets the size of the title.
	 * @default base
	 */
	fontSize?: TitleFontSizeProperties | TitleConditions<TitleFontSizeProperties>;
	/**
	 * The fontWeight property sets how thick or thin characters in title should be displayed.
	 * @default regular
	 */
	fontWeight?: TitleFontWeightProperties | TitleConditions<TitleFontWeightProperties>;
	/**
	 * The lineHeight property specifies the line height of the title.
	 * @default base
	 */
	lineHeight?: TitleLineHeightProperties | TitleConditions<TitleLineHeightProperties>;
	/**
	 * The textAlign property specifies the horizontal alignment of title.
	 * @default left
	 */
	textAlign?: TextAlign | TitleConditions<TextAlign>;
	/**
	 * The color property is used to set the color of the title.
	 * @default neutral-textLow
	 */
	color?: TitleColorProperties | TitleConditions<TitleColorProperties>;
}
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type TitleSkeletonProperties = Pick<TitleProps, "as"> & Partial<Pick<SkeletonProps, "width" | "height" | "data-testid">>;
export type TitleSkeletonProps = TitleSkeletonProperties;
export declare const TitleSkeleton: React.FC<TitleSkeletonProps>;
export interface TitleComponents {
	Skeleton: typeof TitleSkeleton;
}
export interface TitleProperties extends TitleSprinkle {
	/**
	 * The content of the title.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Type of html tag to create for the title.
	 * @default h1
	 */
	as?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
}
export type TitleProps = TitleProperties & HTMLAttributes<HTMLHeadingElement>;
export declare const Title: React.FC<TitleProps> & TitleComponents;

export {};
