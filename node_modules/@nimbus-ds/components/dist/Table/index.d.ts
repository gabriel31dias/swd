// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface TableBodyProperties {
	/**
	 * The content of the table body.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
}
export type TableBodyProps = TableBodyProperties & HTMLAttributes<HTMLTableSectionElement>;
export declare const TableBody: React.FC<TableBodyProps>;
export interface Conditions<T> {
	xs?: T;
	md?: T;
	lg?: T;
	xl?: T;
}
declare const propertiesTable: {
	backgroundColor: {
		transparent: string;
		"neutral-background": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-surfaceHighlight": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"primary-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"primary-surfaceHighlight": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	padding: {
		base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		small: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		none: string;
	};
};
export type TablePaddingProperties = keyof typeof propertiesTable.padding;
export type TableRowBackgroundColorProperties = keyof typeof propertiesTable.backgroundColor;
export interface TableConditions<T> extends Conditions<T> {
	rest?: T;
	focus?: T;
	active?: T;
	hover?: T;
}
export interface TableSprinkle {
	/**
	 * The width property specifies the width of a table's content area.
	 */
	width?: string | TableConditions<string>;
	/**
	 * The maxWidth property specifies the maxWidth of a table's content area.
	 */
	maxWidth?: string | TableConditions<string>;
	/**
	 * The minWidth property specifies the minWidth of a table's content area.
	 */
	minWidth?: string | TableConditions<string>;
	/**
	 * The backgroundColor property sets the background color of the table.
	 */
	backgroundColor?: TableRowBackgroundColorProperties | TableConditions<TableRowBackgroundColorProperties>;
	/**
	 * The padding properties are used to generate space around an table's content area.
	 */
	padding?: TablePaddingProperties | TableConditions<TablePaddingProperties>;
}
export interface TableCellProperties extends TableSprinkle {
	/**
	 * The content of the table cell.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Type of html tag to create for the table cell.
	 * @default td
	 */
	as?: "td" | "th";
}
export type TableCellProps = TableCellProperties & HTMLAttributes<HTMLTableCellElement>;
export declare const TableCell: React.FC<TableCellProps>;
export interface TableHeadProperties {
	/**
	 * The content of the table head.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
}
export type TableHeadProps = TableHeadProperties & HTMLAttributes<HTMLTableSectionElement>;
export declare const TableHead: React.FC<TableHeadProps>;
export interface TableRowProperties extends TableSprinkle {
	/**
	 * The content of the table row.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * The ID of the table row.
	 */
	id?: string;
	/**
	 * Function to be passed when clicking on the table row.
	 * @TJS-type () => void;
	 */
	onClick?: () => void;
}
export type TableRowProps = TableRowProperties & HTMLAttributes<HTMLTableRowElement>;
export declare const TableRow: React.FC<TableRowProps>;
export interface TableComponents {
	Body: typeof TableBody;
	Cell: typeof TableCell;
	Head: typeof TableHead;
	Row: typeof TableRow;
}
export interface TableProperties {
	/**
	 * The content of the table.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
}
export type TableProps = TableProperties & HTMLAttributes<HTMLTableElement>;
export declare const Table: React.FC<TableProps> & TableComponents;

export {};
