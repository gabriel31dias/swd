// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface Conditions<T> {
	xs?: T;
	md?: T;
	lg?: T;
	xl?: T;
}
export type TextAlign = "left" | "right" | "center" | "justify";
export type TextDecoration = "none" | "underline" | "line-through";
export type WordBreak = "normal" | "break-all" | "keep-all" | "break-word";
declare const propertiesText: {
	color: {
		"ai-generative": "transparent";
		currentColor: string;
		"primary-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"primary-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"primary-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"primary-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"success-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"success-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"success-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"success-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"warning-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"warning-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"warning-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"warning-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"danger-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"danger-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"danger-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"danger-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-background": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-textDisabled": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		"neutral-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	textAlign: TextAlign[];
	lineHeight: {
		readonly caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		readonly base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		readonly highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	fontWeight: {
		regular: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		medium: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		bold: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	fontSize: {
		caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
	};
	wordBreak: WordBreak[];
	textDecoration: TextDecoration[];
};
export type TextColorProperties = keyof typeof propertiesText.color;
export type TextFontSizeProperties = keyof typeof propertiesText.fontSize;
export type TextFontWeightProperties = keyof typeof propertiesText.fontWeight;
export type TextLineHeightProperties = keyof typeof propertiesText.lineHeight;
export type TextConditions<T> = Conditions<T>;
export interface TextSprinkle {
	/**
	 * The fontSize property sets the size of the text.
	 * @default base
	 */
	fontSize?: TextFontSizeProperties | TextConditions<TextFontSizeProperties>;
	/**
	 * The fontWeight property sets how thick or thin characters in text should be displayed.
	 * @default regular
	 */
	fontWeight?: TextFontWeightProperties | TextConditions<TextFontWeightProperties>;
	/**
	 * The lineHeight property specifies the line height of the text.
	 * @default base
	 */
	lineHeight?: TextLineHeightProperties | TextConditions<TextLineHeightProperties>;
	/**
	 * The textAlign property specifies the horizontal alignment of text.
	 * @default left
	 */
	textAlign?: TextAlign | TextConditions<TextAlign>;
	/**
	 * The color property is used to set the color of the text.
	 * Note: Gradients like 'ai-generative' changes other properties like 'width' and 'display', which could make the component behave differently. Ensure to visually test the component when dynamically changing the color.
	 * @default neutral-textLow
	 */
	color?: TextColorProperties | TextConditions<TextColorProperties>;
	/**
	 * The amount of lines at which the text will be trimmed, showing an ellipsis when overflowed.
	 */
	lineClamp?: number | TextConditions<number>;
	/**
	 * The amount of lines at which the text will be trimmed, showing an ellipsis when overflowed.
	 */
	WebkitLineClamp?: number | TextConditions<number>;
	/**
	 * The amount of lines at which the text will be trimmed, showing an ellipsis when overflowed.
	 */
	wordBreak?: WordBreak | TextConditions<WordBreak>;
	/**
	 * The textDecoration shorthand property sets the appearance of decorative lines on text.
	 */
	textDecoration?: TextDecoration | TextConditions<TextDecoration>;
}
declare const text: {
	sprinkle: import("rainbow-sprinkles/dist/declarations/src/createRuntimeFn").SprinklesFn<[
		{
			config: {
				color: {
					values: {
						currentColor: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"primary-interactive": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"primary-surface": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"primary-textLow": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"success-textLow": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"success-surface": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"warning-interactive": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"warning-surface": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"warning-textLow": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"danger-interactive": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"danger-surface": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"danger-textLow": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"neutral-background": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"neutral-interactive": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"neutral-surface": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"neutral-textLow": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"success-interactive": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"ai-generative": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"primary-textHigh": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"success-textHigh": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"warning-textHigh": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"danger-textHigh": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"neutral-textDisabled": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"neutral-textHigh": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						"ai-generative": "transparent";
						currentColor: string;
						"primary-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"primary-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"primary-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"primary-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"success-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"success-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"success-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"success-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"warning-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"warning-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"warning-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"warning-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"danger-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"danger-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"danger-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"danger-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"neutral-background": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"neutral-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"neutral-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"neutral-textDisabled": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"neutral-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"neutral-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
					};
					name: "color";
				};
				textAlign: {
					values: {
						center: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						left: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						right: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						justify: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: TextAlign[];
					name: "textAlign";
				};
				lineHeight: {
					values: {
						caption: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						base: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						highlight: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						readonly caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						readonly base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						readonly highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
					};
					name: "lineHeight";
				};
				fontWeight: {
					values: {
						regular: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						medium: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						bold: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						regular: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						medium: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						bold: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
					};
					name: "fontWeight";
				};
				fontSize: {
					values: {
						caption: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						base: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						highlight: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
					};
					name: "fontSize";
				};
				wordBreak: {
					values: {
						normal: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"break-word": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"break-all": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"keep-all": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: WordBreak[];
					name: "wordBreak";
				};
				textDecoration: {
					values: {
						none: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						"line-through": {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						underline: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: TextDecoration[];
					name: "textDecoration";
				};
			};
		} & {
			config: {
				lineClamp: {
					dynamic: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
					dynamicScale: true;
					name: "lineClamp";
					vars: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
				};
				WebkitLineClamp: {
					dynamic: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
					dynamicScale: boolean;
					name: "WebkitLineClamp";
					vars: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
				};
			};
		} & {
			config: {
				[x: string]: {
					mappings: ("fontSize" | "fontWeight" | "color" | "lineHeight" | "textAlign" | "wordBreak" | "lineClamp" | "textDecoration" | "WebkitLineClamp")[];
				};
			};
		}
	]>;
	properties: {
		color: {
			"ai-generative": "transparent";
			currentColor: string;
			"primary-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"primary-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"primary-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"primary-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-background": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-textDisabled": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		textAlign: TextAlign[];
		lineHeight: {
			readonly caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			readonly base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			readonly highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		fontWeight: {
			regular: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			medium: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			bold: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		fontSize: {
			caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		wordBreak: WordBreak[];
		textDecoration: TextDecoration[];
	};
	aiColors: {
		readonly "ai-generative": "transparent";
	};
	aiStyles: {
		readonly "ai-generative": string;
	};
	classnames: {
		base: string;
		trim: string;
		aiGenerative: string;
		aiStyles: {
			readonly "ai-generative": string;
		};
	};
};
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type TextSkeletonProperties = {
	fontSize?: keyof typeof text.properties.fontSize;
} & Partial<Pick<SkeletonProps, "width" | "height" | "data-testid">>;
export type TextSkeletonProps = TextSkeletonProperties;
export declare const TextSkeleton: React.FC<TextSkeletonProps>;
export interface TextComponents {
	Skeleton: typeof TextSkeleton;
}
export interface TextProperties extends Omit<TextSprinkle, "WebkitLineClamp"> {
	/**
	 * The content of the link.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Type of html tag to create for the Text component.
	 * @default p
	 */
	as?: "p" | "span";
}
export type TextProps = TextProperties & Omit<TextSprinkle, "WebkitLineClamp"> & HTMLAttributes<HTMLParagraphElement>;
export declare const Text: React.FC<TextProps> & TextComponents;

export {};
