// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type ListSkeletonItemProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type ListSkeletonItemProps = ListSkeletonItemProperties;
export declare const ListSkeletonItem: React.FC<ListSkeletonItemProps>;
export interface ListSkeletonProperties {
	/**
	 * The content of the list skeleton.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type ListSkeletonProps = ListSkeletonProperties & HTMLAttributes<HTMLDivElement>;
export declare const ListSkeleton: React.FC<ListSkeletonProps>;
export interface ListItemProperties {
	/**
	 * The content of the list item.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
}
export type ListItemProps = ListItemProperties & HTMLAttributes<HTMLLIElement>;
export declare const ListItem: React.FC<ListItemProps>;
export interface ListComponents {
	Skeleton: typeof ListSkeleton;
	SkeletonItem: typeof ListSkeletonItem;
	Item: typeof ListItem;
}
export interface ListProperties {
	/**
	 * The content of the list.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Determines the type of html list that will be rendered
	 * @default ul
	 */
	as?: "ul" | "ol";
}
export type ListProps = ListProperties & HTMLAttributes<HTMLUListElement | HTMLOListElement>;
export declare const List: React.FC<ListProps> & ListComponents;

export {};
