// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { ComponentPropsWithRef, HTMLAttributes, OptgroupHTMLAttributes, OptionHTMLAttributes, ReactNode } from 'react';

export interface SelectGroupProperties {
	/**
	 * Label for the option group.
	 */
	label: string;
	/**
	 * The content of the option group.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
}
export type SelectGroupProps = SelectGroupProperties & OptgroupHTMLAttributes<HTMLOptGroupElement>;
export declare const SelectGroup: React.FC<SelectGroupProps>;
export interface SelectOptionProperties {
	/**
	 * Label for the option.
	 */
	label: string;
	/**
	 * Value of the option
	 */
	value: string;
}
export type SelectOptionProps = SelectOptionProperties & OptionHTMLAttributes<HTMLOptionElement>;
export declare const SelectOption: React.FC<SelectOptionProps>;
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type SelectSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "data-testid">>;
export type SelectSkeletonProps = SelectSkeletonProperties;
export declare const SelectSkeleton: React.FC<SelectSkeletonProps>;
export interface SelectComponents {
	Group: typeof SelectGroup;
	Option: typeof SelectOption;
	Skeleton: typeof SelectSkeleton;
}
export interface SelectProperties {
	/**
	 * The name of the wrapper element or the select element when native.
	 */
	name: string;
	/**
	 * The id of the wrapper element or the select element when native.
	 */
	id: string;
	/**
	 * The content of the select.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Change the visual style of the select.
	 * @default neutral
	 */
	appearance?: "success" | "warning" | "danger" | "neutral" | "ai-generative";
	/**
	 * Shows ai-generative appearance with active ai focus shadow.
	 * When true, this styling takes precedence over `appearance`.
	 * @default false
	 */
	aiGenerated?: boolean;
}
export declare const Select: React.ForwardRefExoticComponent<SelectProperties & React.SelectHTMLAttributes<HTMLSelectElement> & React.InputHTMLAttributes<HTMLSelectElement> & React.RefAttributes<HTMLSelectElement>> & SelectComponents;
export type SelectProps = ComponentPropsWithRef<typeof Select>;

export {};
