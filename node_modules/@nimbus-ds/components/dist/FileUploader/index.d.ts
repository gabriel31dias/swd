// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, InputHTMLAttributes } from 'react';

export type AspectRatio = "1/1" | "16/9" | "9/16" | "4/3" | "3/4" | "2/1" | "1/2";
export type Cursor = "auto" | "pointer" | "not-allowed" | "grab" | "inherit";
declare const fileUploader: {
	sprinkle: ((props: {
		aspectRatio?: "none" | AspectRatio | undefined;
		flexDirection?: "row" | "column" | undefined;
		cursor?: Cursor | undefined;
	}) => string) & {
		properties: Set<"aspectRatio" | "cursor" | "flexDirection">;
	};
	properties: {
		aspectRatio: readonly [
			"none",
			...AspectRatio[]
		];
		flexDirection: readonly [
			"row",
			"column"
		];
		cursor: Cursor[];
	};
	classnames: {
		container: string;
		container__input: string;
		disabled: string;
		skeleton: string;
	};
};
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type FileUploaderSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & Partial<Pick<FileUploaderProps, "aspectRatio">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type FileUploaderSkeletonProps = FileUploaderSkeletonProperties;
export declare const FileUploaderSkeleton: React.FC<FileUploaderSkeletonProps>;
export interface FileUploaderComponents {
	Skeleton: typeof FileUploaderSkeleton;
}
export interface FileUploaderProperties {
	/**
	 * Provide additional context to the action.
	 */
	placeholder?: string;
	/**
	 * Accept file types
	 * @default image/jpeg,image/gif,image/png
	 */
	accept?: string;
	/**
	 * Height value of the file uploader. Defaults to 100%.
	 * @default 100%
	 */
	height?: string;
	/**
	 * Width value of the file uploader. Defaults to 100%.
	 * @default 100%
	 */
	width?: string;
	/**
	 * Permitted aspect ratios for the size of the file uploader.
	 * @default 1/1
	 */
	aspectRatio?: typeof fileUploader.properties.aspectRatio[number];
	/**
	 * Defines the position of the placeholder in relation to the icon.
	 * @default column
	 */
	flexDirection?: typeof fileUploader.properties.flexDirection[number];
}
export type FileUploaderProps = FileUploaderProperties & InputHTMLAttributes<HTMLInputElement>;
export declare const FileUploader: React.FC<FileUploaderProps> & FileUploaderComponents;

export {};
