// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type TagSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type TagSkeletonProps = TagSkeletonProperties;
export declare const TagSkeleton: React.FC<TagSkeletonProps>;
export interface TagComponents {
	Skeleton: typeof TagSkeleton;
}
export interface TagProperties {
	/**
	 * The content of the tag.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Change the visual style of the tag.
	 * @default neutral
	 */
	appearance?: "primary" | "success" | "warning" | "danger" | "neutral" | "ai-generative";
}
export type TagProps = TagProperties & HTMLAttributes<HTMLDivElement>;
export declare const Tag: React.FC<TagProps> & TagComponents;

export {};
