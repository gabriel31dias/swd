// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { ComponentPropsWithRef, HTMLAttributes } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type TextareaSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "data-testid">>;
export type TextareaSkeletonProps = TextareaSkeletonProperties;
export declare const TextareaSkeleton: React.FC<TextareaSkeletonProps>;
export interface TextareaComponents {
	Skeleton: typeof TextareaSkeleton;
}
export interface TextareaProperties {
	/**
	 * Change the visual style of the textarea.
	 * @default neutral
	 */
	appearance?: "neutral" | "success" | "warning" | "danger" | "ai-generative" | "transparent";
	/**
	 * Highlights the field to indicate its value was generated by AI.
	 * Applies AI gradient border, white background and an AI focus ring.
	 */
	aiGenerated?: boolean;
	/**
	 * Number of lines to be rendered for the user to input text
	 * @default 2
	 */
	lines?: number;
	/**
	 * Controls intrinsic sizing behavior of the field. When true, the textarea will grow with content up to the maxLines limit (if provided) and then scroll.
	 * @default false
	 */
	autoGrow?: boolean;
	/**
	 * Caps the textarea visual height to the given number of lines.
	 * When used together with autoGrow=true, the textarea will grow
	 * with content up to this limit and then scroll.
	 */
	maxLines?: number;
	/**
	 * Sets the minimum height of the textarea to the given number of lines.
	 * The textarea will never shrink below this height, even when empty.
	 */
	minLines?: number;
	/**
	 * ID of the textarea
	 * */
	id: string;
	/**
	 * Enable/disable textarea resize functionality
	 * @default true
	 */
	resize?: boolean;
}
export declare const Textarea: React.ForwardRefExoticComponent<TextareaProperties & React.TextareaHTMLAttributes<HTMLTextAreaElement> & React.InputHTMLAttributes<HTMLTextAreaElement> & React.RefAttributes<HTMLTextAreaElement>> & TextareaComponents;
export type TextareaProps = ComponentPropsWithRef<typeof Textarea>;

export {};
