// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, InputHTMLAttributes } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type RadioSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<RadioProps, "as">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type RadioSkeletonProps = RadioSkeletonProperties;
export declare const RadioSkeleton: React.FC<RadioSkeletonProps>;
export interface RadioComponents {
	Skeleton: typeof RadioSkeleton;
}
export interface RadioProperties {
	/**
	 * Name attribute of the input element.
	 */
	name: string;
	/**
	 * Change the visual style of the radio.
	 * @default radio
	 */
	as?: "radio" | "button";
	/**
	 * Modifies true/false value of the native radio.
	 */
	checked?: boolean;
	/**
	 * Modifies the native disabled state of the native radio.
	 */
	disabled?: boolean;
	/**
	 * Text to be rendered inside the component.
	 */
	label?: string;
}
export type RadioProps = RadioProperties & InputHTMLAttributes<HTMLInputElement>;
export declare const Radio: React.FC<RadioProps> & RadioComponents;

export {};
