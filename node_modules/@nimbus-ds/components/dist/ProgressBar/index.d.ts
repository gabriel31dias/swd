// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { ComponentPropsWithRef, HTMLAttributes } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type ProgressBarSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "height" | "data-testid">>;
export declare const ProgressBarSkeleton: React.FC<ProgressBarSkeletonProperties>;
export interface ProgressBarComponents {
	Skeleton: typeof ProgressBarSkeleton;
}
export interface ProgressBarProperties {
	/**
	 * Progress value from 0 to 100
	 * @note Always renders with a minimum 8px width for visual consistency
	 */
	value: number;
	/**
	 * Change the visual style of the progress bar.
	 * @default neutral
	 */
	appearance?: "primary" | "success" | "warning" | "danger" | "neutral" | "ai-generative";
}
/**
 * ProgressBar component displays the progress of an operation or task in a visual format.
 * It provides a horizontal bar that fills based on the completion percentage.
 *
 * @component
 * @example
 * <ProgressBar value={50} appearance="primary" />
 *
 * @example
 * // With skeleton loading state
 * <ProgressBar.Skeleton width="200px" />
 */
export declare const ProgressBar: React.ForwardRefExoticComponent<ProgressBarProperties & Omit<React.HTMLAttributes<HTMLDivElement>, keyof ProgressBarProperties> & React.RefAttributes<HTMLDivElement>> & ProgressBarComponents;
export type ProgressBarProps = ComponentPropsWithRef<typeof ProgressBar>;

export {};
