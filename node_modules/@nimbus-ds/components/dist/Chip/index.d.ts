// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { ButtonHTMLAttributes, HTMLAttributes, ReactNode } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type ChipSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type ChipSkeletonProps = ChipSkeletonProperties;
export declare const ChipSkeleton: React.FC<ChipSkeletonProps>;
export interface ChipComponents {
	Skeleton: typeof ChipSkeleton;
}
export interface ChipProperties {
	/**
	 Text to be displayed on chip.
	*/
	text: string;
	/**
	 * SVG icon to be displayed on chip.
	 * @TJS-type React.ReactNode
	 */
	icon?: ReactNode;
	/**
	 * Informs whether the close icon should be displayed.
	 */
	removable?: boolean;
	/**
	 * Highlights the chip to indicate its value was generated by AI.
	 * Applies AI gradient border and an AI outline.
	 */
	aiGenerated?: boolean;
}
export type ChipProps = ChipProperties & ButtonHTMLAttributes<HTMLButtonElement | HTMLDivElement>;
export declare const Chip: React.FC<ChipProps> & ChipComponents;

export {};
