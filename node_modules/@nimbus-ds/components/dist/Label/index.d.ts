// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type LabelSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type LabelSkeletonProps = LabelSkeletonProperties;
export declare const LabelSkeleton: React.FC<LabelSkeletonProps>;
export interface LabelComponents {
	Skeleton: typeof LabelSkeleton;
}
export interface LabelProperties {
	/**
	 * The content of the label.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * The for attribute specifies which form element a label is bound to.
	 */
	htmlFor?: string;
	/**
	 * If true the label will be visually hidden but maintain accessibility purpose
	 * @default false
	 */
	hidden?: boolean;
}
export type LabelProps = LabelProperties & HTMLAttributes<HTMLElement>;
export declare const Label: React.FC<LabelProps> & LabelComponents;

export {};
