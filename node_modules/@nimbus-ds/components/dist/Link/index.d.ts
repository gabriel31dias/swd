// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { ComponentPropsWithRef, HTMLAttributes, ReactNode } from 'react';

export type Merge<P1 = {}, P2 = {}> = Omit<P1, keyof P2> & P2;
export type ForwardRefExoticComponent<E, OwnProps> = React.ForwardRefExoticComponent<Merge<E extends React.ElementType ? React.ComponentPropsWithRef<E> : never, OwnProps & {
	as?: E;
}>>;
export interface PolymorphicForwardRefComponent<IntrinsicElementString, OwnProps = {}
/**
 * Extends original type to ensure built in React types play nice
 * with polymorphic components still e.g. `React.ElementRef` etc.
 */
> extends ForwardRefExoticComponent<IntrinsicElementString, OwnProps> {
	/**
	 * When `as` prop is passed, use this overload.
	 * Merges original own props (without DOM props) and the inferred props
	 * from `as` element with the own props taking precendence.
	 *
	 * We explicitly avoid `React.ElementType` and manually narrow the prop types
	 * so that events are typed when using JSX.IntrinsicElements.
	 */
	<As = IntrinsicElementString>(props: As extends "" ? {
		as: keyof JSX.IntrinsicElements;
	} : As extends React.ComponentType<infer P> ? Merge<P, OwnProps & {
		as: As;
	}> : As extends keyof JSX.IntrinsicElements ? Merge<JSX.IntrinsicElements[As], OwnProps & {
		as: As;
	}> : never): React.ReactElement | null;
}
export type TextDecoration = "none" | "underline" | "line-through";
declare const link: {
	sprinkle: ((props: {
		textDecoration?: TextDecoration | undefined;
		fontSize?: "base" | "caption" | "highlight" | undefined;
		lineHeight?: "base" | "caption" | "highlight" | undefined;
	}) => string) & {
		properties: Set<"fontSize" | "textDecoration" | "lineHeight">;
	};
	properties: {
		textDecoration: TextDecoration[];
		fontSize: {
			caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		lineHeight: {
			readonly caption: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			readonly base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			readonly highlight: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
	};
	classnames: {
		base: string;
		appearance: Record<"primary" | "danger" | "neutral" | "neutral-background", string>;
	};
};
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type LinkSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "data-testid">>;
export type LinkSkeletonProps = LinkSkeletonProperties;
export declare const LinkSkeleton: React.FC<LinkSkeletonProps>;
export interface LinkComponents {
	Skeleton: typeof LinkSkeleton;
}
export interface LinkProperties {
	/**
	 * The content of the link.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Change the visual style of the link.
	 * @default neutral
	 */
	appearance?: "primary" | "danger" | "neutral" | "neutral-background";
	/**
	 * The textDecoration property specifies the decoration added to link.
	 * @default neutral
	 */
	textDecoration?: typeof link.properties.textDecoration[number];
	/**
	 * The fontSize property sets the size of the link.
	 * @default base
	 */
	fontSize?: keyof typeof link.properties.fontSize;
	/**
	 * The lineHeight property specifies the line height of the link
	 * @default base
	 */
	lineHeight?: keyof typeof link.properties.lineHeight;
}
export type LinkBaseProps = LinkProperties & HTMLAttributes<HTMLElement>;
export declare const Link: PolymorphicForwardRefComponent<"a" | "button", LinkBaseProps> & LinkComponents;
export type LinkProps = ComponentPropsWithRef<typeof Link>;

export {};
