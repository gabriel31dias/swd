// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type AlertSkeletonProperties = Partial<Pick<SkeletonProps, "width" | "height" | "data-testid">>;
export type AlertSkeletonProps = AlertSkeletonProperties;
export declare const AlertSkeleton: React.FC<AlertSkeletonProps>;
export interface AlertComponents {
	Skeleton: typeof AlertSkeleton;
}
export interface AlertProperties {
	/**
	 * The content for the title of the alert.
	 */
	title?: string;
	/**
	 * Change the visual style of the alert.
	 * @default neutral
	 */
	appearance?: "primary" | "success" | "warning" | "danger" | "neutral";
	/**
	 * The content of the alert.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Function to be passed on actioning the dismiss button.
	 * @TJS-type () => void;
	 */
	onRemove?: () => void;
	/**
	 * Determines if the alert is shown or not.
	 * @default true
	 */
	show?: boolean;
}
export type AlertProps = AlertProperties & HTMLAttributes<HTMLElement>;
export declare const Alert: React.FC<AlertProps> & AlertComponents;

export {};
