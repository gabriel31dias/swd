// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes } from 'react';

export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type BadgeSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type BadgeSkeletonProps = BadgeSkeletonProperties;
export declare const BadgeSkeleton: React.FC<BadgeSkeletonProps>;
export interface BadgeComponents {
	Skeleton: typeof BadgeSkeleton;
}
export interface BadgeProperties {
	/**
	 * Change the visual style of the badge.
	 * @default neutral
	 */
	appearance?: "primary" | "success" | "warning" | "danger" | "neutral";
	/**
	 * Total items to be displayed without badge
	 */
	count: number | string;
	/**
	 * Change the color scheme of the badge.
	 * @default surface
	 */
	theme?: "surface" | "light";
}
export type BadgeProps = BadgeProperties & HTMLAttributes<HTMLElement>;
export declare const Badge: React.FC<BadgeProps> & BadgeComponents;

export {};
