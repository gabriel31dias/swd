// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export interface Conditions<T> {
	xs?: T;
	md?: T;
	lg?: T;
	xl?: T;
}
declare const sidebarSprinkle: {
	sprinkle: import("rainbow-sprinkles/dist/declarations/src/createRuntimeFn").SprinklesFn<[
		{
			config: {
				zIndex: {
					values: {
						100: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						200: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						300: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						400: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						500: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						600: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						700: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						800: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						900: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						"100": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"200": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"300": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"400": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"500": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"600": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"700": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"800": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"900": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
					};
					name: "zIndex";
				};
				padding: {
					values: {
						base: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						small: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						none: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						small: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						none: string;
					};
					name: "padding";
				};
			};
		} & {
			config: {
				maxWidth: {
					dynamic: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
					dynamicScale: true;
					name: "maxWidth";
					vars: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
				};
			};
		} & {
			config: {
				[x: string]: {
					mappings: ("zIndex" | "maxWidth" | "padding")[];
				};
			};
		}
	]>;
	properties: {
		zIndex: {
			"100": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"200": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"300": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"400": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"500": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"600": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"700": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"800": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"900": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		padding: {
			base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			small: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			none: string;
		};
	};
};
export type SidebarPaddingProperties = keyof typeof sidebarSprinkle.properties.padding;
export type SidebarZIndexProperties = keyof typeof sidebarSprinkle.properties.zIndex;
export interface SidebarSprinkle {
	/**
	 * The maxWidth property specifies the maxWidth of a sidebar's content area.
	 * @default 375px
	 */
	maxWidth?: string | Conditions<string>;
	/**
	 * The zIndex property specifies the stack order of the sidebar.
	 */
	zIndex?: SidebarZIndexProperties | Conditions<SidebarZIndexProperties>;
	/**
	 * The padding properties are used to generate space around an sidebar's content area.
	 * @default base
	 */
	padding?: SidebarPaddingProperties | Conditions<SidebarPaddingProperties>;
}
declare const sidebar: {
	sprinkle: import("rainbow-sprinkles/dist/declarations/src/createRuntimeFn").SprinklesFn<[
		{
			config: {
				zIndex: {
					values: {
						100: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						200: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						300: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						400: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						500: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						600: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						700: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						800: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						900: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						"100": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"200": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"300": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"400": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"500": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"600": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"700": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"800": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						"900": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
					};
					name: "zIndex";
				};
				padding: {
					values: {
						base: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						small: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
						none: {
							default: string;
							conditions: Record<"xs" | "md" | "lg" | "xl", string>;
						};
					};
					staticScale: {
						base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						small: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
						none: string;
					};
					name: "padding";
				};
			};
		} & {
			config: {
				maxWidth: {
					dynamic: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
					dynamicScale: true;
					name: "maxWidth";
					vars: {
						default: string;
						conditions: Record<"xs" | "md" | "lg" | "xl", string>;
					};
				};
			};
		} & {
			config: {
				[x: string]: {
					mappings: ("zIndex" | "maxWidth" | "padding")[];
				};
			};
		}
	]>;
	properties: {
		zIndex: {
			"100": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"200": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"300": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"400": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"500": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"600": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"700": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"800": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"900": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
		};
		padding: {
			base: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			small: `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			none: string;
		};
	};
	classnames: {
		overlay: string;
		overlayScoped: string;
		container: string;
		containerScoped: string;
		container__header: string;
		container__body: string;
		container__footer: string;
		position: Record<"left" | "right", string>;
		isVisible: string;
	};
};
export type CloseOnOutsidePress = (event: PointerEvent | MouseEvent) => boolean;
export interface SidebarBodyProperties {
	/**
	 * The content of the sidebar body.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * The padding properties are used to generate space around an sidebar's body content area.
	 * @default base
	 */
	padding?: keyof typeof sidebar.properties.padding;
}
export type SidebarBodyProps = SidebarBodyProperties & HTMLAttributes<HTMLElement>;
export declare const SidebarBody: React.FC<SidebarBodyProps>;
export interface SidebarFooterProperties {
	/**
	 * The content of the sidebar footer.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * The padding properties are used to generate space around an sidebar's footer content area.
	 * @default base
	 */
	padding?: keyof typeof sidebar.properties.padding;
}
export type SidebarFooterProps = SidebarFooterProperties & HTMLAttributes<HTMLElement>;
export declare const SidebarFooter: React.FC<SidebarFooterProps>;
export interface SidebarHeaderProperties {
	/**
	 * The content of the sidebar header.
	 * @TJS-type React.ReactNode
	 */
	children?: ReactNode;
	/**
	 * The title to display in the sidebar header.
	 */
	title?: string;
	/**
	 * The padding properties are used to generate space around an sidebar's header content area.
	 * @default base
	 */
	padding?: keyof typeof sidebar.properties.padding;
}
export type SidebarHeaderProps = SidebarHeaderProperties & HTMLAttributes<HTMLElement>;
export declare const SidebarHeader: React.FC<SidebarHeaderProps>;
export interface SidebarComponents {
	Body: typeof SidebarBody;
	Footer: typeof SidebarFooter;
	Header: typeof SidebarHeader;
}
export interface SidebarProperties extends SidebarSprinkle {
	/**
	 * Side from which the sidebar will appear.
	 * @default right
	 */
	position?: "right" | "left";
	/**
	 * The padding properties are used to generate space around an sidebar's content area.
	 * @default base
	 */
	padding?: keyof typeof sidebar.properties.padding;
	/**
	 * The content of the sidebar.
	 * @TJS-type React.ReactNode
	 */
	children: ReactNode;
	/**
	 * Callback fired when the component requests to be closed.
	 * () => void;
	 */
	onRemove?: () => void;
	/**
	 * Determines if the sidebar is shown or not.
	 * @default true
	 */
	open?: boolean;
	/**
	 * Determines if RemoveScroll wraps sidebar's children component.
	 * @default true
	 */
	needRemoveScroll?: boolean;
	/**
	 * Controls whether clicking/pressing outside should close the sidebar.
	 * - boolean: enable/disable dismissal on outside press
	 * - function: receive the DOM event and return true to allow closing, false to ignore
	 *
	 * Defaults to true for backward compatibility.
	 */
	closeOnOutsidePress?: boolean | CloseOnOutsidePress;
	/**
	 * The attribute name to ignore when checking for outside clicks.
	 * @default "data-nimbus-outside-press-ignore"
	 */
	ignoreAttributeName?: string;
}
export type SidebarProps = SidebarProperties & {
	/**
	 * Root element where the portal should be mounted. When provided and not null,
	 * the portal renders inside this element; when null/undefined, the default root is used.
	 */
	root?: HTMLElement | null;
} & HTMLAttributes<HTMLDivElement>;
export declare const Sidebar: React.FC<SidebarProps> & SidebarComponents;

export {};
