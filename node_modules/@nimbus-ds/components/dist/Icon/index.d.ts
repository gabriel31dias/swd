// Generated by dts-bundle-generator v7.2.0

import React from 'react';
import { HTMLAttributes, ReactNode } from 'react';

export type Cursor = "auto" | "pointer" | "not-allowed" | "grab" | "inherit";
declare const icon: {
	sprinkle: ((props: {
		color?: "currentColor" | "primary-interactive" | "primary-surface" | "primary-textLow" | "success-textLow" | "success-surface" | "warning-interactive" | "warning-surface" | "warning-textLow" | "danger-interactive" | "danger-surface" | "danger-textLow" | "neutral-background" | "neutral-interactive" | "neutral-surface" | "neutral-textLow" | "success-interactive" | "ai-generative" | "primary-textHigh" | "success-textHigh" | "warning-textHigh" | "danger-textHigh" | "neutral-textDisabled" | "neutral-textHigh" | undefined;
		cursor?: Cursor | undefined;
	}) => string) & {
		properties: Set<"color" | "cursor">;
	};
	properties: {
		color: {
			currentColor: string;
			"primary-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"primary-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"primary-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"primary-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"success-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"warning-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"danger-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-background": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-surface": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-interactive": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-textLow": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-textDisabled": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"neutral-textHigh": `var(--${string})` | `var(--${string}, ${string})` | `var(--${string}, ${number})`;
			"ai-generative": string;
		};
		cursor: Cursor[];
	};
	classnames: {
		base: string;
	};
};
export interface SkeletonProperties {
	/**
	 * Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.
	 */
	width: string;
	/**
	 * Height of the skeleton. Useful when you don't want to adapt the skeleton to a text element but for instance a card.
	 */
	height: string;
	/**
	 * The border radius of the skeleton.
	 */
	borderRadius?: string;
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
}
export type SkeletonProps = SkeletonProperties & HTMLAttributes<HTMLDivElement>;
export type IconSkeletonProperties = Partial<Pick<SkeletonProps, "width">> & Partial<Pick<SkeletonProps, "height">> & {
	/**
	 * This is an attribute used to identify a DOM node for testing purposes.
	 */
	"data-testid"?: string;
};
export type IconSkeletonProps = IconSkeletonProperties;
export declare const IconSkeleton: React.FC<IconSkeletonProps>;
export interface IconComponents {
	Skeleton: typeof IconSkeleton;
}
export interface IconProperties {
	/**
	 * The SVG contents to display in the Icon.
	 * @TJS-type React.ReactNode
	 */
	source: ReactNode;
	/**
	 * Set the color for the SVG fill.
	 * Use "ai-generative" to apply the Nimbus AI generative gradient.
	 * @default neutral-textLow
	 */
	color?: keyof typeof icon.properties.color | "ai-generative";
	/**
	 * The cursor property specifies the mouse cursor to be displayed when pointing over an element.
	 * @default inherit
	 */
	cursor?: (typeof icon.properties.cursor)[number];
}
export type IconProps = IconProperties & HTMLAttributes<HTMLDivElement>;
export declare const Icon: React.FC<IconProps> & IconComponents;
/**
 * Checks if a color value is valid (exists and is not "none" or "transparent")
 * @param color - The color value to check
 * @returns True if color is valid, false otherwise
 */
export declare const isValidColorValue: (color: string | undefined) => boolean;
/**
 * Checks if a color value can use gradient (valid and not already a URL reference)
 * @param color - The color value to check
 * @returns True if color can use gradient, false otherwise
 */
export declare const canUseGradient: (color: string) => boolean;
/**
 * Checks if a color value is a gradient
 * @param color - The color value to check
 * @returns True if color is a known gradient value, false otherwise
 */
export declare const isGradient: (color: string) => boolean;
/**
 * Collection of known gradient color values
 */
export declare const GRADIENT_COLORS: Set<string>;

export {};
